var TOKEN_GLOBAL_KEY = 'logintoken'
var TOKEN_TS_KEY = 'logintoken_ts'
var TOKEN_TTL_MS = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç

function authenticate(helper, paramsValues, credentials) {
	print('‚û° –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API...')

	var debugEnabled = paramsValues['debug'] === 'true'
	var now = new Date().getTime()
	var existingToken =
		org.zaproxy.zap.extension.script.ScriptVars.getGlobalVar(TOKEN_GLOBAL_KEY)
	var tokenTimestamp =
		org.zaproxy.zap.extension.script.ScriptVars.getGlobalVar(TOKEN_TS_KEY)

	if (
		existingToken &&
		tokenTimestamp &&
		now - parseInt(tokenTimestamp) < TOKEN_TTL_MS
	) {
		print(
			'‚Ñπ –¢–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.'
		)

		var dummyMsg = helper.prepareMessage()
		var uri = new org.apache.commons.httpclient.URI(
			paramsValues['authUrl'],
			false
		)
		dummyMsg.setRequestHeader(
			new org.parosproxy.paros.network.HttpRequestHeader(
				'GET ' + uri.getPath() + ' HTTP/1.1\r\nHost: ' + uri.getHost()
			)
		)
		dummyMsg.getRequestHeader().setURI(uri)
		dummyMsg
			.getRequestHeader()
			.setHeader('Authorization', 'Bearer ' + existingToken)
		dummyMsg.setRequestBody('')
		dummyMsg.getRequestHeader().setContentLength(0)

		return dummyMsg
	}

	try {
		var msg = helper.prepareMessage()
		var requestUri = paramsValues['authUrl']
		var user = credentials.getParam('username')
		var pass = credentials.getParam('password')

		var template = paramsValues['loginRequestBody']
		if (!template) {
			print(
				'‚ö†Ô∏è loginRequestBody –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: email/–ø–∞—Ä–æ–ª—å'
			)
			template = '{"email":"{%username%}","password":"{%password%}"}'
		}
		var jsonBody = template
			.replace('{%username%}', user)
			.replace('{%password%}', pass)

		msg
			.getRequestHeader()
			.setURI(new org.apache.commons.httpclient.URI(requestUri, false))
		msg.getRequestHeader().setMethod('POST')
		msg.getRequestHeader().setHeader('Content-Type', 'application/json')
		msg.setRequestBody(jsonBody)
		msg.getRequestHeader().setContentLength(jsonBody.length)

		helper.sendAndReceive(msg)

		var responseBody = msg.getResponseBody().toString()
		var responseCode = msg.getResponseHeader().getStatusCode()

		log('INFO', '‚Ñπ –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + responseCode, false, debugEnabled)
		log('DEBUG', 'üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ' + responseBody, true, debugEnabled)

		if (responseCode !== 200) {
			print('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + responseCode)
			return null
		}

		var json = JSON.parse(responseBody)
		var tokenPath = paramsValues['tokenPath'] || 'authentication.token'
		var token = resolveJsonPath(json, tokenPath)

		if (!token) {
			print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ –ø—É—Ç–∏: ' + tokenPath)
			return null
		}

		if (debugEnabled) {
			print('‚úÖ  ' + token)
		} else {
			print('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω (—Å–∫—Ä—ã—Ç, –≤–∫–ª—é—á–∏—Ç–µ debug –¥–ª—è –≤—ã–≤–æ–¥–∞)')
		}
		
		log('INFO', '–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω', false, debugEnabled)
		log('DEBUG', '–¢–æ–∫–µ–Ω: ' + token, true, debugEnabled)


		org.zaproxy.zap.extension.script.ScriptVars.setGlobalVar(
			TOKEN_GLOBAL_KEY,
			token
		)
		org.zaproxy.zap.extension.script.ScriptVars.setGlobalVar(
			TOKEN_TS_KEY,
			String(now)
		)

		return msg
	} catch (e) {
		print('üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + e)
		return null
	}
}

function resolveJsonPath(obj, path) {
	return path.split('.').reduce(function (prev, curr) {
		return prev && prev[curr]
	}, obj)
}

function log(level, message, sensitive, debugEnabled) {
	level = level.toUpperCase()

	// –ü—Ä–æ–ø—É—Å–∫ DEBUG –∏ SENSITIVE, –µ—Å–ª–∏ debug –æ—Ç–∫–ª—é—á–µ–Ω
	if (!debugEnabled && (level === 'DEBUG' || sensitive)) {
		return
	}

	var prefix =
		{
			DEBUG: 'üêû [DEBUG]',
			INFO: '‚ÑπÔ∏è [INFO]',
			WARN: '‚ö†Ô∏è [WARN]',
			ERROR: '‚ùå [ERROR]',
		}[level] || '[LOG]'

	print(prefix + ' ' + message)
}

function getRequiredParamsNames() {
	return ['authUrl']
}

function getOptionalParamsNames() {
	return []
}

function getCredentialsParamsNames() {
	return ['username', 'password']
}
